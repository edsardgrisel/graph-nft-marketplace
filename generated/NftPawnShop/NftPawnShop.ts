// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NftDelisted extends ethereum.Event {
  get params(): NftDelisted__Params {
    return new NftDelisted__Params(this);
  }
}

export class NftDelisted__Params {
  _event: NftDelisted;

  constructor(event: NftDelisted) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NftListed extends ethereum.Event {
  get params(): NftListed__Params {
    return new NftListed__Params(this);
  }
}

export class NftListed__Params {
  _event: NftListed;

  constructor(event: NftListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NftSold extends ethereum.Event {
  get params(): NftSold__Params {
    return new NftSold__Params(this);
  }
}

export class NftSold__Params {
  _event: NftSold;

  constructor(event: NftSold) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PawnAgreementRemoved extends ethereum.Event {
  get params(): PawnAgreementRemoved__Params {
    return new PawnAgreementRemoved__Params(this);
  }
}

export class PawnAgreementRemoved__Params {
  _event: PawnAgreementRemoved;

  constructor(event: PawnAgreementRemoved) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PawnRequestApproved extends ethereum.Event {
  get params(): PawnRequestApproved__Params {
    return new PawnRequestApproved__Params(this);
  }
}

export class PawnRequestApproved__Params {
  _event: PawnRequestApproved;

  constructor(event: PawnRequestApproved) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get loanAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get loanDuration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PawnRequestRemoved extends ethereum.Event {
  get params(): PawnRequestRemoved__Params {
    return new PawnRequestRemoved__Params(this);
  }
}

export class PawnRequestRemoved__Params {
  _event: PawnRequestRemoved;

  constructor(event: PawnRequestRemoved) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PawnRequested extends ethereum.Event {
  get params(): PawnRequested__Params {
    return new PawnRequested__Params(this);
  }
}

export class PawnRequested__Params {
  _event: PawnRequested;

  constructor(event: PawnRequested) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get loanAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get loanDuration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NftPawnShop__getAllListedNftsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getNftAddresses(): Array<Address> {
    return this.value0;
  }

  getTokenIds(): Array<BigInt> {
    return this.value1;
  }
}

export class NftPawnShop__getNftPawnAgreementResultValue0Struct extends ethereum.Tuple {
  get borrower(): Address {
    return this[0].toAddress();
  }

  get lender(): Address {
    return this[1].toAddress();
  }

  get nftAddress(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get loanAmount(): BigInt {
    return this[4].toBigInt();
  }

  get loanDuration(): BigInt {
    return this[5].toBigInt();
  }

  get interestRate(): BigInt {
    return this[6].toBigInt();
  }

  get startTime(): BigInt {
    return this[7].toBigInt();
  }

  get endTime(): BigInt {
    return this[8].toBigInt();
  }

  get paidBackOrForeclosed(): boolean {
    return this[9].toBoolean();
  }
}

export class NftPawnShop__getNftPawnRequestResultValue0Struct extends ethereum.Tuple {
  get borrower(): Address {
    return this[0].toAddress();
  }

  get nftAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get loanAmount(): BigInt {
    return this[3].toBigInt();
  }

  get loanDuration(): BigInt {
    return this[4].toBigInt();
  }

  get interestRate(): BigInt {
    return this[5].toBigInt();
  }
}

export class NftPawnShop extends ethereum.SmartContract {
  static bind(address: Address): NftPawnShop {
    return new NftPawnShop("NftPawnShop", address);
  }

  calculateInterest(
    loanAmount: BigInt,
    interestRate: BigInt,
    startTime: BigInt,
    endTime: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateInterest",
      "calculateInterest(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(loanAmount),
        ethereum.Value.fromUnsignedBigInt(interestRate),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateInterest(
    loanAmount: BigInt,
    interestRate: BigInt,
    startTime: BigInt,
    endTime: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateInterest",
      "calculateInterest(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(loanAmount),
        ethereum.Value.fromUnsignedBigInt(interestRate),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllListedNfts(): NftPawnShop__getAllListedNftsResult {
    let result = super.call(
      "getAllListedNfts",
      "getAllListedNfts():(address[],uint256[])",
      [],
    );

    return new NftPawnShop__getAllListedNftsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_getAllListedNfts(): ethereum.CallResult<NftPawnShop__getAllListedNftsResult> {
    let result = super.tryCall(
      "getAllListedNfts",
      "getAllListedNfts():(address[],uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftPawnShop__getAllListedNftsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getBalance(user: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeesAccumulated(): BigInt {
    let result = super.call(
      "getFeesAccumulated",
      "getFeesAccumulated():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getFeesAccumulated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFeesAccumulated",
      "getFeesAccumulated():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNftPawnAgreement(
    user: Address,
  ): NftPawnShop__getNftPawnAgreementResultValue0Struct {
    let result = super.call(
      "getNftPawnAgreement",
      "getNftPawnAgreement(address):((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(user)],
    );

    return changetype<NftPawnShop__getNftPawnAgreementResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getNftPawnAgreement(
    user: Address,
  ): ethereum.CallResult<NftPawnShop__getNftPawnAgreementResultValue0Struct> {
    let result = super.tryCall(
      "getNftPawnAgreement",
      "getNftPawnAgreement(address):((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftPawnShop__getNftPawnAgreementResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getNftPawnRequest(
    nftAddress: Address,
    tokenId: BigInt,
  ): NftPawnShop__getNftPawnRequestResultValue0Struct {
    let result = super.call(
      "getNftPawnRequest",
      "getNftPawnRequest(address,uint256):((address,address,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return changetype<NftPawnShop__getNftPawnRequestResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getNftPawnRequest(
    nftAddress: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<NftPawnShop__getNftPawnRequestResultValue0Struct> {
    let result = super.tryCall(
      "getNftPawnRequest",
      "getNftPawnRequest(address,uint256):((address,address,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftPawnShop__getNftPawnRequestResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getOwner(nftAddress: Address, tokenId: BigInt): Address {
    let result = super.call("getOwner", "getOwner(address,uint256):(address)", [
      ethereum.Value.fromAddress(nftAddress),
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getOwner(
    nftAddress: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwner",
      "getOwner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOwnerOfContract(): Address {
    let result = super.call(
      "getOwnerOfContract",
      "getOwnerOfContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getOwnerOfContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwnerOfContract",
      "getOwnerOfContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPrice(nftAddress: Address, tokenId: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(nftAddress),
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(
    nftAddress: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBalance(user: Address): BigInt {
    let result = super.call(
      "getUserBalance",
      "getUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getUserBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBalance",
      "getUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApprovePawnRequestCall extends ethereum.Call {
  get inputs(): ApprovePawnRequestCall__Inputs {
    return new ApprovePawnRequestCall__Inputs(this);
  }

  get outputs(): ApprovePawnRequestCall__Outputs {
    return new ApprovePawnRequestCall__Outputs(this);
  }
}

export class ApprovePawnRequestCall__Inputs {
  _call: ApprovePawnRequestCall;

  constructor(call: ApprovePawnRequestCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApprovePawnRequestCall__Outputs {
  _call: ApprovePawnRequestCall;

  constructor(call: ApprovePawnRequestCall) {
    this._call = call;
  }
}

export class BuyNftCall extends ethereum.Call {
  get inputs(): BuyNftCall__Inputs {
    return new BuyNftCall__Inputs(this);
  }

  get outputs(): BuyNftCall__Outputs {
    return new BuyNftCall__Outputs(this);
  }
}

export class BuyNftCall__Inputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyNftCall__Outputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ForeclosePawnAgreementCall extends ethereum.Call {
  get inputs(): ForeclosePawnAgreementCall__Inputs {
    return new ForeclosePawnAgreementCall__Inputs(this);
  }

  get outputs(): ForeclosePawnAgreementCall__Outputs {
    return new ForeclosePawnAgreementCall__Outputs(this);
  }
}

export class ForeclosePawnAgreementCall__Inputs {
  _call: ForeclosePawnAgreementCall;

  constructor(call: ForeclosePawnAgreementCall) {
    this._call = call;
  }
}

export class ForeclosePawnAgreementCall__Outputs {
  _call: ForeclosePawnAgreementCall;

  constructor(call: ForeclosePawnAgreementCall) {
    this._call = call;
  }
}

export class ListNftCall extends ethereum.Call {
  get inputs(): ListNftCall__Inputs {
    return new ListNftCall__Inputs(this);
  }

  get outputs(): ListNftCall__Outputs {
    return new ListNftCall__Outputs(this);
  }
}

export class ListNftCall__Inputs {
  _call: ListNftCall;

  constructor(call: ListNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListNftCall__Outputs {
  _call: ListNftCall;

  constructor(call: ListNftCall) {
    this._call = call;
  }
}

export class RemoveListingCall extends ethereum.Call {
  get inputs(): RemoveListingCall__Inputs {
    return new RemoveListingCall__Inputs(this);
  }

  get outputs(): RemoveListingCall__Outputs {
    return new RemoveListingCall__Outputs(this);
  }
}

export class RemoveListingCall__Inputs {
  _call: RemoveListingCall;

  constructor(call: RemoveListingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveListingCall__Outputs {
  _call: RemoveListingCall;

  constructor(call: RemoveListingCall) {
    this._call = call;
  }
}

export class RemovePawnRequestCall extends ethereum.Call {
  get inputs(): RemovePawnRequestCall__Inputs {
    return new RemovePawnRequestCall__Inputs(this);
  }

  get outputs(): RemovePawnRequestCall__Outputs {
    return new RemovePawnRequestCall__Outputs(this);
  }
}

export class RemovePawnRequestCall__Inputs {
  _call: RemovePawnRequestCall;

  constructor(call: RemovePawnRequestCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemovePawnRequestCall__Outputs {
  _call: RemovePawnRequestCall;

  constructor(call: RemovePawnRequestCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayLoanCall extends ethereum.Call {
  get inputs(): RepayLoanCall__Inputs {
    return new RepayLoanCall__Inputs(this);
  }

  get outputs(): RepayLoanCall__Outputs {
    return new RepayLoanCall__Outputs(this);
  }
}

export class RepayLoanCall__Inputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }
}

export class RepayLoanCall__Outputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }
}

export class RequestPawnCall extends ethereum.Call {
  get inputs(): RequestPawnCall__Inputs {
    return new RequestPawnCall__Inputs(this);
  }

  get outputs(): RequestPawnCall__Outputs {
    return new RequestPawnCall__Outputs(this);
  }
}

export class RequestPawnCall__Inputs {
  _call: RequestPawnCall;

  constructor(call: RequestPawnCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get loanAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get loanDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RequestPawnCall__Outputs {
  _call: RequestPawnCall;

  constructor(call: RequestPawnCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateListingPriceCall extends ethereum.Call {
  get inputs(): UpdateListingPriceCall__Inputs {
    return new UpdateListingPriceCall__Inputs(this);
  }

  get outputs(): UpdateListingPriceCall__Outputs {
    return new UpdateListingPriceCall__Outputs(this);
  }
}

export class UpdateListingPriceCall__Inputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateListingPriceCall__Outputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
